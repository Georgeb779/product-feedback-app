// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String           @id @default(cuid())
  email         String           @unique
  emailVerified DateTime?        @map("email_verified")
  password      String?
  name          String?
  username      String?          @unique
  image         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  requests      ProductRequest[]
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
  Upvotes       Upvotes[]
  replayTo      Reply[]          @relation("RepliedToUser")
  replyUser     Reply[]          @relation("UserReplying")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProductRequest {
  id          String    @id @default(cuid())
  title       String
  category    String
  upvotes     Int       @default(0)
  status      String
  description String
  user        User      @relation(fields: [user_id], references: [id])
  user_id     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  Comment     Comment[]
  Upvotes     Upvotes[]

  @@map("product_requests")
}

model Comment {
  id                 String          @id @default(cuid())
  content            String
  user               User            @relation(fields: [user_id], references: [id])
  user_id            String
  product_request    ProductRequest? @relation(fields: [product_request_id], references: [id])
  product_request_id String
  replies            Reply[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @default(now()) @updatedAt

  @@map("comments")
}

model Reply {
  id              String   @id @default(cuid())
  content         String
  user            User     @relation(name: "UserReplying", fields: [user_id], references: [id])
  user_id         String
  comment         Comment  @relation(fields: [comment_id], references: [id])
  comment_id      String
  replied_to_user User     @relation(name: "RepliedToUser", fields: [replied_to], references: [id])
  replied_to      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

  @@map("replies")
}

model Upvotes {
  id                 String         @id @default(cuid())
  user               User           @relation(fields: [user_id], references: [id])
  user_id            String         @map("user_id")
  product_request    ProductRequest @relation(fields: [product_request_id], references: [id])
  product_request_id String

  @@unique([user_id, product_request_id])
  @@map("upvotes")
}
